mg_code:"",
rest_name:"",
rest_open:"",
rest_close:"",
category_id:"",
rest_connect:"",
rest_address:"",
rest_description:"",

code,
name,
open,
close,
category,
connect,
address,
description,

*************





editrantaurant 
***********
const {
        mg_code,
        rest_name,
        rest_open,
        rest_close,
        category_id,
        rest_connect,
        rest_address,
        rest_description,
        rest_image,
      } = restaurantsData.data[0];
      setData({
        code: mg_code,
        name: rest_name,
        open: rest_open,
        close: rest_close,
        category: category_id,
        connect: rest_connect,
        address: rest_address,
        description: rest_description,
        image: rest_image,
      });
      ***************
       <TextField
                    id="filled-select-currency"
                    select
                    label="ເລືອກປະເພດສະຖານທີ່"
                    name="category"
                    value={selectedCategory}
                    onChange={(e) => handleChange(e)}
                    variant="filled"
                  >
                    {isGetcategory.map((option) => (
                      <MenuItem
                        key={option.category_id ||null}
                        value={option.category_id }
                      >
                        {option.category_name}
                      </MenuItem>
                    ))}
                  </TextField>
        ***********************
        

import React, { useState, useEffect } from "react";
import toast, { Toaster } from "react-hot-toast";
import defaultBanner from "../imgs/blog banner.png";
import TextField from "@mui/material/TextField";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import MenuItem from "@mui/material/MenuItem";
import AnimationWrapper from "../common/page-animation";
import InputLabel from "@mui/material/InputLabel";
import { theme } from "../itemsMui/thomeMui";
import { ReadById, Update } from "../function/Restaurants.api";
import { ReloadMg } from "../function/manager.Api";
import { Reload } from "../function/categoryFunction";
import { useParams, useNavigate, Navigate } from "react-router-dom";

const Edit_Restaurants = () =>{

    const params = useParams();
    //   console.log(params.id);
  
    // TODO: Review image alter uploadImages
    const [previewImage, setPreviewImage] = useState(null);
    const [Images, setimge] = useState(null);
    // TODO: get datas inputs from ui and data default 
    const [selectedCategory, setSelectedCategory] = useState(""); // ส้างมาเกับค่าทีเราต้ิงกานป้อน ข้อมุนให่ม
    const [isData, setData] = useState({
        mg_code:"",
        rest_name:"",
        rest_open:"",
        rest_close:"",
        category_id:"",
        rest_connect:"",
        rest_address:"",
        rest_description:"",
    });
  
    const handleChange = (e) => {
      if (e.target.files && e.target.files.length > 0) {
        const selectedFile = e.target.files[0];
        setimge(selectedFile);
        setPreviewImage(URL.createObjectURL(selectedFile));
        setData({ ...isData, [e.target.name]: selectedFile });
      } else {
        setData({ ...isData, [e.target.name]: e.target.value });
      }
  
      // Update selectedCategory if using controlled input
      if (e.target.name === "category_id") {
        setSelectedCategory(e.target.value);
      }
    };
//   console.log(isData);
  
    // FIXME: varibles category only get from db
    const [isGetcategory, setGetcategory] = useState([]);
    
   //  FIXME: set get file image old
    const [fileOld, setFileOld] = useState(); 
    // FIXME: set file image get from db
    const [isGetDataManager, setGetDataManager] = useState([]); // ມາເກັບ data manager
    // Load category data on component mount
    useEffect(() => {
      loadData(params.id);
      loadCate(params.id);
      loadManager();
    }, []);
    // feact data hotels from db  
    const loadData = async () => {
      try {
        const restaurantsData = await ReadById(params.id);
        setData(restaurantsData.data[0]); // Set place data
        setFileOld(restaurantsData.data[0].rest_image);
        setSelectedCategory(restaurantsData.data[0].category_id); // Set selected category
      } catch (error) {
        console.error("Error loading data:", error);
      }
    };
    // console.log("file old "+fileOld);
  
  //  feact data category from db 
    const loadCate = async () => {
      Reload()
        .then((res) => setGetcategory(res.data))
        .catch((err) => console.log(err));
    };
  
    // console.log(selectedCategory);
    const loadManager = async () => {
      ReloadMg()
        .then((res) => setGetDataManager(res.data))
        .catch((err) => console.log(err));
    };
  
    const handleUpdate = async (e) => {
        e.preventDefault();
        console.log(isData);

        try {
           
            if(!isData.rest_image) {
                toast.error("ທ່ານຕ້ອງເລືອກຮູບກ່ອນ ");
                return;
              } else  if(!isData.mg_code){
                toast.error("ທ່ານຕ້ອງໃສລະຫັດ code ");
                return;
              } else if (!isData.rest_name) {
                toast.error("ກະຮຸນາໃສ່ຊື່ກ່ອນ ");
                return;
              }else if(!isData.category_id) {
                toast.error("ກະຮຸນາໃສຊອງປະເພດສະຖານທີ່ກ່ອນ ");
                return;
              }else if(!isData.rest_connect) {
                toast.error("ກະຮຸນາໃສຊອງທາງຕິດຕໍ ");
                return;
              }
              
                     // Check if the provided mg_code matches the mg_code from the manager data
          const manager = isGetDataManager.find((manager) => manager.mg_code === isData.mg_code);
          if (!manager) {
            toast.error("ຂໍອະໄພ: ລະຫັດໂຄດບໍ່ຖືກຕ້ອງ ກຮຸນາລອງໃຫ່ມ");
            return;
          }
        //   console.log("manager"+manager.mg_code);
          // Construct FormData object
          const formDatas = new FormData();
          for (const key in isData) {
            formDatas.append(key, isData[key]);
            formDatas.append('fileold', fileOld);
          }
    
          // Submit form data
          const res = await Update(params.id, formDatas);
          console.log(res.data);
          loadData();
         return toast.success("ບັນທຶກຊ້ອມູນສຳເລັດແລ້ວ");
        
           
          } catch (error) {
            console.error(error);
           return toast.error("ຂໍອະໄພ: ບັນທືກບໍ່ສຳເລັດ");
          }
       
      };
    
      // console.log("mg_code value:", isData.mg_code);

    return(

        <ThemeProvider theme={theme}>
        <Toaster />
        <AnimationWrapper>
          <div className=" py-4 px-[5vw] md:px-[2vw]">
            <div className="mx-auto max-w-[900px] w-full">
             <form action=""
               onSubmit={handleUpdate}
               encType="multipart/form-data" >
  
             <div className="flex w-full flex-col mt-5 font-bold">
               
               <div className="relative aspect-video hover:opacity-80 bg-white border-4 border-grey ">
               <label htmlFor="uploadBanner">
                    {previewImage ? (
                      <img src={previewImage} className="z-20" alt="Preview" />
                    ) : isData.rest_image ? (
                      <img
                        src={`${import.meta.env.VITE_SERVER_DOMAIN_IMG}/${
                          isData.rest_image
                        }`}
                        alt={isData.rest_name}
                        className="z-20"
                      />
                    ) : (
                      <img
                        src={defaultBanner}
                        className="z-20"
                        alt="Default Banner"
                      />
                    )}
                    <input
                      id="uploadBanner"
                      name="rest_image"
                      type="file"
                      accept="image/*"
                      hidden
                      onChange={(e) => handleChange(e)}
                    />
                  </label>
               </div>
               <div className="flex w-full flex-col mt-4 gap-4 font-bold">
                 <TextField
                   id="filled-multiline-flexible"
                   label="ລະຫັດcode:MGX***"
                   multiline
                   maxRows={7}
                   variant="filled"
                   name="mg_code"
                   value={isData.mg_code}
                   onChange={(e) => handleChange(e)}
                 />
                 <TextField
                   id="filled-multiline-flexible"
                   label="ຊື່ຮ້ານອາຫານ"
                   multiline
                   maxRows={7}
                   variant="filled"
                   name="rest_name"
                   value={isData.rest_name}
                   onChange={(e) => handleChange(e)}
                 />
                 <div className="w-full flex-col">
                   <InputLabel htmlFor="component-simple">ເວລາເປີດ</InputLabel>
                   <TextField
                     className="w-full"
                     id="filled-multiline-flexible"
                     required
                     type="time"
                     maxRows={7}
                     variant="filled"
                     name="rest_open"
                     value={isData.rest_open}
                     onChange={(e) => handleChange(e)}
                   />
                 </div>
  
                 <div className="w-full flex-col">
                   <InputLabel htmlFor="component-simple">ເວລາປີດ</InputLabel>
                   <TextField
                     className="w-full"
                     id="filled-multiline-flexible"
                     required
                     type="time"
                     maxRows={7}
                     variant="filled"
                     name="rest_close"
                     value={isData.rest_close}
                     onChange={(e) => handleChange(e)}
                   />
                 </div>
                
                 <TextField
                      id="filled-select-currency"
                      select
                      label="ເລືອກປະເພດສະຖານທີ່"
                      name="category_id"
                      value={selectedCategory}
                      onChange={(e) => handleChange(e)}
                      variant="filled"
                    >
                      {isGetcategory.map((option) => (
                        <MenuItem
                          key={option.category_id}
                          value={option.category_id}
                        >
                          {option.category_name}
                        </MenuItem>
                      ))}
                </TextField>
                <TextField
                   id="filled-multiline-flexible"
                   label="ຂໍ້ມູນຕິດຕໍ່ສອບຖາມ Tel or Email"
                   multiline
                   maxRows={7}
                   variant="filled"
                   name="rest_connect"
                   value={isData.rest_connect}
                   onChange={(e) => handleChange(e)}
                 />
                 <TextField
                   id="filled-multiline-flexible"
                   label="ຕຳແໜ່ງທີ່ຢູ່"
                   multiline
                   maxRows={7}
                   variant="filled"
                   name="rest_address"
                   value={isData.rest_address}
                   onChange={(e) => handleChange(e)}
                 />
                 
                 <TextField
                   id="filled-multiline-static"
                   label="ຄຳອທີບາຍເພີ້ມເຕີມ"
                   multiline
                   rows={4}
                   variant="filled"
                   name="rest_description"
                   value={isData.rest_description}
                   onChange={(e) => handleChange(e)}
                 />
                
               </div>
  
               <div className="flex justify-center w-full mt-4 ">
                    {/* Render button for submitting form */}
                    <button
                      type="submit"
                      className="text-white w-full rounded-tl-full rounded-bl-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300  font-medium  text-sm px-5 py-2.5 text-center me-2 mb-2"
                    >
                      Save
                    </button>
                    {/* Render button for refreshing data */}
                    <button
                      type="button"
                      // onClick={handleClear}
                      // className="w-full text-white bg-ro hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-gray-400 font-medium rounded-tr-full rounded-br-full text-sm px-5 py-2.5 me-2 mb-2"
                      className="text-white w-full rounded-tr-full rounded-br-full  bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200  font-medium  text-sm px-5 py-2.5 text-center me-2 mb-2"
                    >
                      Refresh
                    </button>
                  </div>
             </div>
  
             </form>
            </div>
  
          </div>
        </AnimationWrapper>
      </ThemeProvider>

    );
}

export default Edit_Restaurants;